---
globs: Dockerfile*,docker-compose*.yml,*.docker,ecosystem.config.js,.env*
description: Configura√ß√£o Docker, deploy e ambiente para o sistema webhook mapper
---

# Configura√ß√£o Docker e Deploy

## üê≥ Dockerfile Multi-stage OBRIGAT√ìRIO

### Estrutura Base:
```dockerfile
# ‚úÖ Correto - Multi-stage build
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

# Production stage
FROM node:20-alpine
WORKDIR /app
RUN npm install -g pm2
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
RUN npm ci --only=production
EXPOSE 3000
CMD ["pm2-runtime", "start", "ecosystem.config.js"]
```

### Otimiza√ß√µes Obrigat√≥rias:
- SEMPRE usar Alpine Linux (menor footprint)
- Multi-stage build para reduzir tamanho final
- npm ci ao inv√©s de npm install
- PM2 para process management
- .dockerignore configurado corretamente

## üöÄ Docker Compose - Arquitetura Completa

### Estrutura OBRIGAT√ìRIA:
```yaml
# ‚úÖ Correto - docker-compose.yml
version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: webhook-redis
    volumes:
      - redis-data:/data
    networks:
      - webhook-net
    restart: unless-stopped

  webhook-mapper:
    build: .
    container_name: webhook-mapper
    ports:
      - "3000:3000"
    volumes:
      - ./schemas:/app/schemas
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - webhook-net

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - webhook-mapper
    networks:
      - webhook-net

networks:
  webhook-net:
    driver: bridge

volumes:
  redis-data:
```

### Volumes Cr√≠ticos:
- `/app/schemas` - Schemas gerados (PERSIST)
- `/app/logs` - Logs da aplica√ß√£o (PERSIST)  
- `/app/data` - Banco SQLite (PERSIST)
- `redis-data` - Cache Redis (PERSIST)

## üîß PM2 Ecosystem Configuration

### ecosystem.config.js OBRIGAT√ìRIO:
```javascript
// ‚úÖ Correto - PM2 config para produ√ß√£o
module.exports = {
  apps: [{
    name: 'webhook-mapper',
    script: 'dist/server/index.js',
    instances: 'max',
    exec_mode: 'cluster',
    max_memory_restart: '1G',
    env: {
      NODE_ENV: 'production',
      PORT: 3000
    },
    error_file: '/app/logs/err.log',
    out_file: '/app/logs/out.log',
    log_file: '/app/logs/combined.log',
    time: true,
    autorestart: true,
    watch: false,
    max_restarts: 10,
    min_uptime: '10s'
  }]
};
```

## üåê Nginx Reverse Proxy

### Configura√ß√£o nginx.conf:
```nginx
# ‚úÖ Correto - Nginx otimizado para webhooks
worker_processes auto;
worker_connections 1024;

events {
    worker_connections 1024;
    use epoll;
}

http {
    upstream webhook_backend {
        server webhook-mapper:3000;
        keepalive 32;
    }
    
    server {
        listen 80;
        server_name _;
        
        client_max_body_size 100M;
        client_body_timeout 60s;
        
        location /webhook {
            proxy_pass http://webhook_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        location /api {
            proxy_pass http://webhook_backend;
            proxy_set_header Host $host;
        }
        
        location /health {
            proxy_pass http://webhook_backend;
        }
    }
}
```

## üìù Vari√°veis de Ambiente

### .env.example COMPLETO:
```bash
# ‚úÖ Correto - Todas as vari√°veis necess√°rias
# Server Configuration
NODE_ENV=production
PORT=3000
HOST=0.0.0.0
LOG_LEVEL=info

# Database
DATABASE_PATH=/app/data/database.sqlite

# Redis
REDIS_HOST=redis
REDIS_PORT=6379

# Security
CORS_ORIGIN=*
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=60000

# Truncate Configuration
TRUNCATE_MAX_LENGTH=100
TRUNCATE_FIELDS=base64,JPEGThumbnail,thumbnail,data,image

# File Management
MAX_RAW_SAMPLES=10
MAX_EXAMPLES_PER_SCHEMA=20

# Queue Configuration
QUEUE_CONCURRENCY=5
QUEUE_MAX_ATTEMPTS=3
QUEUE_BACKOFF_DELAY=2000

# Monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
```

### NUNCA commitar .env - SEMPRE usar _env para exemplos

## üöÄ Scripts de Deploy

### deploy.sh - Script de Deploy Completo:
```bash
#!/bin/bash
# ‚úÖ deploy.sh - Deploy automatizado

set -e

echo "üöÄ Starting WhatsApp Webhook Mapper Deployment"

# Verifica√ß√µes pr√©-deploy
if [ ! -f ".env" ]; then
    echo "‚ùå .env file not found. Copy from .env.example"
    exit 1
fi

# Backup de dados existentes
if [ -d "data" ]; then
    echo "üíæ Backing up existing data..."
    cp -r data data_backup_$(date +%Y%m%d_%H%M%S)
fi

# Build das imagens
echo "üî® Building Docker images..."
docker-compose build --no-cache

# Deploy
echo "üéØ Starting services..."
docker-compose down
docker-compose up -d

# Verifica√ß√£o de sa√∫de
echo "üîç Checking service health..."
sleep 10

if curl -f http://localhost:3000/health > /dev/null 2>&1; then
    echo "‚úÖ Service is healthy"
else
    echo "‚ùå Service health check failed"
    docker-compose logs webhook-mapper
    exit 1
fi

echo "‚ú® Deployment completed successfully!"
echo "üìç Webhook endpoint: http://localhost:3000/webhook"
```

## üîç Health Checks e Monitoring

### Health Check Endpoints:
- `/health` - Health check geral
- `/webhook/health` - Health check do webhook
- `/api/stats` - Estat√≠sticas e m√©tricas

### Logs Estruturados:
```json
// ‚úÖ Correto - Formato de log estruturado
{
  "timestamp": "2024-01-01T12:00:00.000Z",
  "level": "info",
  "service": "webhook-mapper",
  "message": "Event processed successfully",
  "eventType": "Message",
  "duration": 150,
  "metadata": {
    "truncated": true,
    "schemaUpdated": false
  }
}
```

## üõ°Ô∏è Seguran√ßa e Boas Pr√°ticas

### Dockerfile Security:
```dockerfile
# ‚úÖ Correto - Pr√°ticas de seguran√ßa
FROM node:20-alpine

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S webhook -u 1001

# Copiar arquivos como root
COPY --chown=webhook:nodejs . .

# Mudar para usu√°rio n√£o-root
USER webhook

EXPOSE 3000
```

### Network Security:
- SEMPRE usar redes Docker customizadas
- Expor apenas portas necess√°rias
- Rate limiting configurado
- CORS configurado adequadamente

## üìä Monitoramento e Alertas

### M√©tricas Essenciais:
- Taxa de eventos recebidos por minuto
- Tempo de processamento m√©dio
- Falhas de processamento
- Uso de mem√≥ria e CPU
- Tamanho da queue Redis
- Espa√ßo em disco (schemas)

### Docker Stats Monitoring:
```bash
# ‚úÖ Script de monitoramento
#!/bin/bash
while true; do
    echo "$(date): Container stats"
    docker stats webhook-mapper --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
    sleep 60
done
```

## üîÑ Backup e Recovery

### Backup Autom√°tico:
```bash
# ‚úÖ Script de backup
#!/bin/bash
BACKUP_DIR="/backups/$(date +%Y%m%d)"
mkdir -p $BACKUP_DIR

# Backup schemas
tar -czf $BACKUP_DIR/schemas.tar.gz ./schemas

# Backup database
cp ./data/database.sqlite $BACKUP_DIR/

# Backup logs (last 7 days)
find ./logs -mtime -7 -type f -exec cp {} $BACKUP_DIR/ \;

echo "Backup completed: $BACKUP_DIR"
```

## üß™ Ambientes de Deploy

### Development:
- Single container
- Volumes locais
- Hot reload habilitado
- Debug mode

### Production:
- Multi-container com redund√¢ncia
- Volumes persistentes
- PM2 cluster mode
- SSL/TLS habilitado
- Monitoring completo